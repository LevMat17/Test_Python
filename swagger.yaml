swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Tasker"
host: "127.0.0.0"
basePath: "/"
schemes:
- "http"
paths:
  /task:
    post:
      tags:
      - "task"
      summary: "Add a new Task"
      description: ""
      operationId: "addTask"
      consumes:
      - "application/json"
      produces:
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Task object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Task"
      responses:
        "201":
          description: "Creation OK"
          schema:
            items:
              $ref: "#/definitions/TaskResponse"
    put:
      tags:
      - "task"
      summary: "Update an existing task"
      description: ""
      operationId: "updateTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Task object that needs to be update"
        required: true
        schema:
          $ref: "#/definitions/Task"
      responses:
        "200":
          description: "Get success"
          schema:
            items:
              $ref: "#/definitions/TaskResponse"
        "404":
          description: "Task not found"
    get:
      tags:
      - "task"
      summary: "Finds Tasks"
      description: "Sort tasks by multiple values"
      operationId: "findTasks"
      produces:
      - "application/json"
      parameters:
      - name: "sortby"
        in: "query"
        description: "Values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "creation_date"
          - "last_update"
          - "priority"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TaskResponse"
        "400":
          description: "Invalid Value"
  /task/{id}:
    get:
      tags:
      - "task"
      summary: "Find task by ID"
      description: "Returns a single task"
      operationId: "getTaskById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of task to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TaskResponse"
        "404":
          description: "Task not found"
    delete:
      tags:
      - "task"
      summary: "Delete a task"
      description: ""
      operationId: "deleteTask"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Task id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Deletion success"
definitions:
  Task:
    type: "object"
    properties:
      name:
        type: "string"
      priority:
        type: "integer"
        format: "int32"
      description:
        type: "string"
  TaskResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      creation_date:
        type: "string"
        format: "date-time"
      last_update:
        type: "string"
        format: "date-time"
      priority:
        type: "integer"
        format: "int64"
